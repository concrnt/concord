syntax = "proto3";

package concord.badge;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "concord/badge/params.proto";
import "concord/badge/badge.proto";
import "cosmos/nft/v1beta1/nft.proto";

option go_package = "github.com/concrnt/concord/x/badge/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/concrnt/concord/badge/params";
  
  }
  
  // Queries a list of GetBadge items.
  rpc GetBadge (QueryGetBadgeRequest) returns (QueryGetBadgeResponse) {
    option (google.api.http).get = "/concrnt/concord/badge/get_badge/{seriesId}/{badgeId}";
  
  }
  
  // Queries a list of GetBadgesByOwner items.
  rpc GetBadgesByOwner (QueryGetBadgesByOwnerRequest) returns (QueryGetBadgesByOwnerResponse) {
    option (google.api.http).get = "/concrnt/concord/badge/get_badges_by_owner/{owner}";
  
  }
  
  // Queries a list of GetSeriesByOwner items.
  rpc GetSeriesByOwner (QueryGetSeriesByOwnerRequest) returns (QueryGetSeriesByOwnerResponse) {
    option (google.api.http).get = "/concrnt/concord/badge/get_series_by_owner/{owner}";
  
  }
  
  // Queries a list of GetBadgesBySeries items.
  rpc GetBadgesBySeries (QueryGetBadgesBySeriesRequest) returns (QueryGetBadgesBySeriesResponse) {
    option (google.api.http).get = "/concrnt/concord/badge/get_badges_by_series/{series}";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryGetBadgeRequest {
  string seriesId = 1;
  string badgeId  = 2;
}

message QueryGetBadgeResponse {
  Badge badge = 1;
}

message QueryGetBadgesByOwnerRequest {
  string owner = 1;
}

message QueryGetBadgesByOwnerResponse {
  repeated Badge badges = 1;
}

message QueryGetSeriesByOwnerRequest {
  string owner = 1;
}

message QueryGetSeriesByOwnerResponse {
  repeated cosmos.nft.v1beta1.Class series = 1;
}

message QueryGetBadgesBySeriesRequest {
  string series = 1;
}

message QueryGetBadgesBySeriesResponse {
  repeated Badge badges = 1;
}

